import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  ArrowLeft, 
  PawPrint, 
  Plus,
  AlertCircle,
  Sparkles,
  Heart
} from "lucide-react";
import { Link } from "wouter";
import PetStatus from "@/components/pet/PetStatus";
import PetAction from "@/components/pet/PetAction";
import { useUserPet, useCreatePet } from "@/modules/pet/usePet";
import { useAdminAuth } from "@/hooks/useAdminAuth";

/**
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å
 * ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
 */
export default function PetPage() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [petType, setPetType] = useState("cat");
  const [petName, setPetName] = useState("");

  const { data: currentUser } = useAdminAuth();
  const userId = currentUser?.user?.id || 0;
  
  const { data: pet, isLoading, error } = useUserPet(userId);
  const createMutation = useCreatePet();

  const handleCreatePet = async () => {
    if (!petName.trim()) return;

    try {
      await createMutation.mutateAsync({
        userId,
        type: petType,
        name: petName.trim(),
      });

      setPetName("");
      setIsCreateDialogOpen(false);
    } catch (error) {
      // Error ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô mutation hook
    }
  };

  const petTypes = [
    { id: "cat", name: "‡πÅ‡∏°‡∏ß", emoji: "üê±", description: "‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ä‡∏≠‡∏ö‡πÄ‡∏•‡πà‡∏ô" },
    { id: "dog", name: "‡∏´‡∏°‡∏≤", emoji: "üê∂", description: "‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå ‡∏£‡∏±‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á" },
    { id: "rabbit", name: "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢", emoji: "üê∞", description: "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∞‡∏â‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏â‡∏á" },
    { id: "bird", name: "‡∏ô‡∏Å", emoji: "üê¶", description: "‡∏â‡∏•‡∏≤‡∏î ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏±‡∏ô" },
    { id: "hamster", name: "‡πÅ‡∏Æ‡∏°‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå", emoji: "üêπ", description: "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏Ç‡∏¢‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á" },
    { id: "fish", name: "‡∏õ‡∏•‡∏≤", emoji: "üê†", description: "‡∏™‡∏á‡∏ö ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°" },
  ];

  if (!currentUser?.user) {
    return (
      <div className="container mx-auto p-6">
        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50">
        <div className="container mx-auto p-6 space-y-6">
          <div className="flex items-center space-x-4 mb-6">
            <div className="h-10 w-10 bg-gray-200 rounded-full animate-pulse"></div>
            <div className="space-y-2">
              <div className="h-6 w-48 bg-gray-200 rounded animate-pulse"></div>
              <div className="h-4 w-32 bg-gray-200 rounded animate-pulse"></div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="animate-pulse">
              <CardHeader>
                <div className="h-6 w-32 bg-gray-200 rounded"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="h-20 bg-gray-200 rounded"></div>
                  <div className="h-32 bg-gray-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
            
            <Card className="animate-pulse">
              <CardHeader>
                <div className="h-6 w-32 bg-gray-200 rounded"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="h-16 bg-gray-200 rounded"></div>
                  <div className="h-16 bg-gray-200 rounded"></div>
                  <div className="h-16 bg-gray-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {error.message}
          </AlertDescription>
        </Alert>
        <div className="mt-4">
          <Link href="/feed">
            <Button variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏µ‡∏î
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
  if (!pet) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50">
        <div className="container mx-auto p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center space-x-4">
              <Link href="/feed">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  ‡∏Å‡∏•‡∏±‡∏ö
                </Button>
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900 flex items-center space-x-2">
                  <PawPrint className="h-6 w-6" />
                  <span>‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</span>
                </h1>
                <p className="text-gray-500">‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</p>
              </div>
            </div>
          </div>

          {/* ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö */}
          <div className="max-w-2xl mx-auto">
            <Card className="text-center">
              <CardHeader>
                <CardTitle className="flex items-center justify-center space-x-2 text-2xl">
                  <Sparkles className="h-6 w-6 text-purple-600" />
                  <span>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á!</span>
                </CardTitle>
              </CardHeader>
              
              <CardContent className="space-y-6">
                <div className="text-lg text-gray-600">
                  ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç
                </div>

                <div className="bg-blue-50 rounded-lg p-6 text-left">
                  <h3 className="font-semibold text-blue-800 mb-3">‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700">
                    <div className="flex items-center space-x-2">
                      <Heart className="h-4 w-4" />
                      <span>‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Sparkles className="h-4 w-4" />
                      <span>‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏∏‡∏Å 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <PawPrint className="h-4 w-4" />
                      <span>‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏•‡πÄ‡∏ß‡∏•</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Plus className="h-4 w-4" />
                      <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡∏µ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô</span>
                    </div>
                  </div>
                </div>

                <Button
                  onClick={() => setIsCreateDialogOpen(true)}
                  className="bg-purple-600 hover:bg-purple-700 text-lg px-8 py-6 h-auto"
                >
                  <Plus className="h-5 w-5 mr-2" />
                  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Dialog ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á */}
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center space-x-2">
                <PawPrint className="h-5 w-5" />
                <span>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</span>
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-6">
              {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á */}
              <div>
                <Label className="text-base font-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mt-3">
                  {petTypes.map((type) => (
                    <button
                      key={type.id}
                      onClick={() => setPetType(type.id)}
                      className={`p-4 rounded-lg border-2 transition-all text-left ${
                        petType === type.id
                          ? "border-purple-500 bg-purple-50"
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                    >
                      <div className="text-2xl mb-2">{type.emoji}</div>
                      <div className="font-medium">{type.name}</div>
                      <div className="text-xs text-gray-500">{type.description}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ */}
              <div>
                <Label htmlFor="pet-name" className="text-base font-semibold">‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</Label>
                <Input
                  id="pet-name"
                  value={petName}
                  onChange={(e) => setPetName(e.target.value)}
                  placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                  maxLength={50}
                  className="mt-2"
                />
              </div>

              {/* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
              {petName && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="text-sm text-gray-600 mb-2">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</div>
                  <div className="flex items-center space-x-3">
                    <div className="text-3xl">
                      {petTypes.find(t => t.id === petType)?.emoji}
                    </div>
                    <div>
                      <div className="font-semibold">{petName}</div>
                      <div className="text-sm text-gray-500">
                        {petTypes.find(t => t.id === petType)?.name} ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 1
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div className="flex space-x-3">
                <Button
                  variant="outline"
                  className="flex-1"
                  onClick={() => setIsCreateDialogOpen(false)}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
                <Button
                  className="flex-1 bg-purple-600 hover:bg-purple-700"
                  onClick={handleCreatePet}
                  disabled={!petName.trim() || createMutation.isPending}
                >
                  {createMutation.isPending ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...</span>
                    </div>
                  ) : (
                    <div className="flex items-center space-x-2">
                      <Plus className="h-4 w-4" />
                      <span>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</span>
                    </div>
                  )}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    );
  }

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
  const selectedPetType = petTypes.find(t => t.id === pet.type);

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50">
      <div className="container mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/feed">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                ‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </Link>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center space-x-2">
                <PawPrint className="h-6 w-6" />
                <span>‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</span>
              </h1>
              <p className="text-gray-500">‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</p>
            </div>
          </div>
        </div>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á */}
        <Card className="bg-gradient-to-r from-purple-100 to-pink-100 border-purple-200">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="text-4xl">{selectedPetType?.emoji || "üêæ"}</div>
                <div>
                  <div className="text-xl font-bold">{pet.name}</div>
                  <div className="text-sm text-gray-600">
                    {selectedPetType?.name} ‡πÄ‡∏•‡πÄ‡∏ß‡∏• {pet.level}
                  </div>
                </div>
              </div>
              
              <div className="text-right">
                <div className="text-sm text-gray-500">‡∏≠‡∏≤‡∏¢‡∏∏</div>
                <div className="font-semibold">
                  {Math.floor((new Date().getTime() - new Date(pet.createdAt).getTime()) / (1000 * 60 * 60 * 24))} ‡∏ß‡∏±‡∏ô
                </div>
              </div>
            </CardTitle>
          </CardHeader>
        </Card>

        {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á */}
          <div>
            <PetStatus pet={pet} userId={userId} />
          </div>

          {/* ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ */}
          <div>
            <PetAction pet={pet} userId={userId} />
          </div>
        </div>
      </div>
    </div>
  );
}