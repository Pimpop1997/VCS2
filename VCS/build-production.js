import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á BergDotBet B.B ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production (‡∏Ç‡πâ‡∏≤‡∏° TypeScript errors)...');

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå build ‡πÄ‡∏Å‡πà‡∏≤
console.log('üì¶ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå build ‡πÄ‡∏Å‡πà‡∏≤...');
if (fs.existsSync('dist')) {
  fs.rmSync('dist', { recursive: true });
}
if (fs.existsSync('client/dist')) {
  fs.rmSync('client/dist', { recursive: true });
}

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: Build client application (‡∏Ç‡πâ‡∏≤‡∏° type checking)
console.log('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á client application...');
try {
  execSync('NODE_OPTIONS="--max-old-space-size=4096" vite build --config vite.config.production.ts', { stdio: 'inherit' });
  console.log('‚úÖ Client build ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
} catch (error) {
  console.error('‚ùå Client build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
  process.exit(1);
}

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: Build server ‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≤‡∏° TypeScript errors
console.log('‚öôÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á server application (‡∏Ç‡πâ‡∏≤‡∏° TypeScript errors)...');
try {
  execSync('esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --external:postgres --external:bcrypt --external:drizzle-orm --external:drizzle-zod --target=node18 --loader:.ts=ts --allow-overwrite', { stdio: 'inherit' });
  console.log('‚úÖ Server build ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
} catch (error) {
  console.warn('‚ö†Ô∏è Server build ‡∏°‡∏µ warnings ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
console.log('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤...');
const filesToCopy = [
  'package.json',
  'vercel.json',
  'drizzle.config.ts'
];

filesToCopy.forEach(file => {
  if (fs.existsSync(file)) {
    fs.copyFileSync(file, path.join('dist', file));
    console.log(`üìÑ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ${file} ‡πÅ‡∏•‡πâ‡∏ß`);
  }
});

console.log('üéâ Build ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
console.log('üìÅ ‡πÑ‡∏ü‡∏•‡πå Client: client/dist/');
console.log('üìÅ ‡πÑ‡∏ü‡∏•‡πå Server: dist/');
console.log('');
console.log('‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
console.log('1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub repository');
console.log('2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ repository ‡∏Å‡∏±‡∏ö Vercel');
console.log('3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables ‡πÉ‡∏ô Vercel dashboard');
console.log('4. Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á production');